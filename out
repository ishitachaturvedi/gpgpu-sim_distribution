Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f2000007e7 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793fa000007ef matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079404000007f9 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f6000007eb matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079405000007fa matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079407000007fc matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793fe000007f3 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f1000007e6 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079401000007f6 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079402000007f7 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0789d6000007dd matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793ff000007f4 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f3000007e8 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/libcudart.so matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f07940b00000805 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079400000007f5 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793fc000007f1 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0789c6000007dc matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079406000007fb matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f9000007ee matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793fd000007f2 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f078886000007d9 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0789e6000007de matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f0000007e5 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0789a2000007da matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f5000007ea matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f8000007ed matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f078b13000007e0 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079403000007f8 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793ed000007e2 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f07940a00000804 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f079408000007fd matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f07940900000803 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793ef000007e4 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793ee000007e3 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793fb000007f0 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f4000007e9 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793ec000007e1 matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0789ae000007db matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f078a6c000007df matches
Binary file lib/gcc-6.5.0/cuda-9010/release/.nfs000000000f0793f7000007ec matches
err:shader.h: In member function 'virtual bool specialized_unit::can_issue(const warp_inst_t&) const':
err:shader.h: In member function 'virtual bool specialized_unit::can_issue(const warp_inst_t&) const':
err:../libcuda/../src/cuda-sim/../gpgpu-sim/shader.h: In member function 'virtual bool specialized_unit::can_issue(const warp_inst_t&) const':
err:cuda-sim/../gpgpu-sim/shader.h: In member function 'virtual bool specialized_unit::can_issue(const warp_inst_t&) const':
err:../libcuda/../src/cuda-sim/../gpgpu-sim/shader.h: In member function 'virtual bool specialized_unit::can_issue(const warp_inst_t&) const':
err:../libcuda/../src/cuda-sim/../gpgpu-sim/shader.h: In member function 'virtual bool specialized_unit::can_issue(const warp_inst_t&) const':
src/abstract_hardware_model.h:  void issue(const active_mask_t &mask, unsigned warp_id,
src/gpgpu-sim/shader.cc:  (*pipe_reg)->issue(active_mask, warp_id,
src/gpgpu-sim/shader.cc:void shader_core_ctx::issue() {
src/gpgpu-sim/shader.cc:    if (issue_inst.has_ready() && m_fu[n]->can_issue(**ready_reg)) {
src/gpgpu-sim/shader.cc:        m_fu[n]->issue(issue_inst);
src/gpgpu-sim/shader.cc:        m_fu[n]->issue(issue_inst);
src/gpgpu-sim/shader.cc:void sfu::issue(register_set &source_reg) {
src/gpgpu-sim/shader.cc:  pipelined_simd_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:void tensor_core::issue(register_set &source_reg) {
src/gpgpu-sim/shader.cc:  pipelined_simd_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:void sp_unit ::issue(register_set &source_reg) {
src/gpgpu-sim/shader.cc:  pipelined_simd_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:void dp_unit ::issue(register_set &source_reg) {
src/gpgpu-sim/shader.cc:  pipelined_simd_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:void specialized_unit ::issue(register_set &source_reg) {
src/gpgpu-sim/shader.cc:  pipelined_simd_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:void int_unit ::issue(register_set &source_reg) {
src/gpgpu-sim/shader.cc:  pipelined_simd_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:void pipelined_simd_unit::issue(register_set &source_reg) {
src/gpgpu-sim/shader.cc:  simd_function_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:    virtual void issue( register_set& source_reg )
src/gpgpu-sim/shader.cc:        simd_function_unit::issue(source_reg);
src/gpgpu-sim/shader.cc:void ldst_unit::issue(register_set &reg_set) {
src/gpgpu-sim/shader.cc:  pipelined_simd_unit::issue(reg_set);
src/gpgpu-sim/shader.cc:void ldst_unit::issue( register_set &reg_set )
src/gpgpu-sim/shader.cc:   pipelined_simd_unit::issue(reg_set);
src/gpgpu-sim/shader.cc:          ? m_shader_stats->get_dynamic_warp_issue()[scheduler_sampling_core]
src/gpgpu-sim/shader.cc:          : m_shader_stats->get_warp_slot_issue()[scheduler_sampling_core];
src/gpgpu-sim/shader.cc:  issue();
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg) {
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg);
src/gpgpu-sim/shader.h:      virtual void issue( register_set& source_reg )
src/gpgpu-sim/shader.h:          simd_function_unit::issue(source_reg);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:    return simd_function_unit::can_issue(inst);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:    return pipelined_simd_unit::can_issue(inst);
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:    return pipelined_simd_unit::can_issue(inst);
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:    return pipelined_simd_unit::can_issue(inst);
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:    return pipelined_simd_unit::can_issue(inst);
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:    return pipelined_simd_unit::can_issue(inst);
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:    return pipelined_simd_unit::can_issue(inst);
src/gpgpu-sim/shader.h:  virtual void issue(register_set &source_reg);
src/gpgpu-sim/shader.h:  virtual void issue(register_set &inst);
src/gpgpu-sim/shader.h:  virtual bool can_issue(const warp_inst_t &inst) const {
src/gpgpu-sim/shader.h:  const std::vector<std::vector<unsigned>> &get_dynamic_warp_issue() const {
src/gpgpu-sim/shader.h:  const std::vector<std::vector<unsigned>> &get_warp_slot_issue() const {
src/gpgpu-sim/shader.h:  void issue();
src/stream_manager.h:  void issue() { m_issued++; }
src/abstract_hardware_model.cc:void warp_inst_t::issue(const active_mask_t &mask, unsigned warp_id,
Binary file build/gcc-6.5.0/cuda-9010/release/gpgpu-sim/libgpu_uarch_sim.a matches
Binary file build/gcc-6.5.0/cuda-9010/release/gpgpu-sim/shader.o matches
Binary file build/gcc-6.5.0/cuda-9010/release/libgpgpusim.a matches
libcuda/cuda_runtime_api.cc:  e->issue();
